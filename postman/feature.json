{
  "info": {
    "_postman_id": "e5968864-1788-45e7-ba31-e41620d1cd6a",
    "name": "feature_comments",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
    "_exporter_id": "29015023"
  },
  "item": [
    {
      "name": "Добавление комментария",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);   \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Комментарий должен содержать поля: id, created, text, authorId\", function () {\r",
              "pm.expect(target).to.have.property('id');\r",
              "pm.expect(target).to.have.property('text');\r",
              "pm.expect(target).to.have.property('eventId');\r",
              "pm.expect(target).to.have.property('userId');\r",
              "pm.expect(target).to.have.property('created');\r",
              "pm.expect(target).to.have.property('lastUpdated');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id).equal(1);\r",
              "    pm.expect(source.text).equal(target.text);\r",
              "    pm.expect(target.eventId).equal(2);\r",
              "    pm.expect(target.userId).equal(1);\r",
              "    pm.expect(target.created).to.not.be.null;\r",
              "    pm.expect(target.lastUpdated).to.be.null;\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Added comment\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments?eventId=2",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments"
          ],
          "query": [
            {
              "key": "eventId",
              "value": "2"
            }
          ],
          "variable": [
            {
              "key": "userId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение списка комментариев",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "var jsonData = pm.response.json();\r",
              "\r",
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
              "    pm.response.to.be.ok;\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "})\r",
              "\r",
              "pm.test(\"Размер списка должен равняться 1\", function() {\r",
              "    pm.expect(jsonData.length, 'Размер списка должен равняться 1').to.eql(1);\r",
              "})\r",
              "\r",
              "pm.test(\"Тест поля 'id' comment[0]\", function () {\r",
              "    pm.expect(jsonData[0]).to.have.property('id');\r",
              "    pm.expect(jsonData[0].id, 'Поле \"id\" должно равняться: 1').to.eql(1);\r",
              "});\r",
              "pm.test(\"Тест поля 'text' comment[0]\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('text');\r",
              "    pm.expect(jsonData[0].text, 'Поле \"text\" должно равняться: Added comment').to.eql('Added comment');\r",
              "});\r",
              "pm.test(\"Тест поля 'eventId' comment[0]\", function () {\r",
              "    pm.expect(jsonData[0]).to.have.property('eventId');\r",
              "    pm.expect(jsonData[0].eventId, 'Поле \"eventId\" должно равняться: 2').to.eql(2);\r",
              "});\r",
              "pm.test(\"Тест поля 'userId' comment[0]\", function () {\r",
              "    pm.expect(jsonData[0]).to.have.property('userId');\r",
              "    pm.expect(jsonData[0].userId, 'Поле \"userId\" должно равняться: 1').to.eql(1);\r",
              "});\r",
              "pm.test(\"Тест поля 'created' comment[0]\", function () {\r",
              "    pm.expect(jsonData[0]).to.have.property('created');\r",
              "    pm.expect(jsonData[0].created, 'Поле \"created\" не должно быть null').to.not.be.null;\r",
              "});\r",
              "pm.test(\"Тест поля 'lastUpdated' comment[0]\", function () {\r",
              "    pm.expect(jsonData[0]).to.have.property('lastUpdated');\r",
              "    pm.expect(jsonData[0].lastUpdated, 'Поле \"lastUpdated\" должно быть null').to.be.null;\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/comments/events/:eventId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "comments",
            "events",
            ":eventId"
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Обновление комментария",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.be.ok;   \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Комментарий должен содержать поля: id, created, text, authorId\", function () {\r",
              "pm.expect(target).to.have.property('id');\r",
              "pm.expect(target).to.have.property('text');\r",
              "pm.expect(target).to.have.property('eventId');\r",
              "pm.expect(target).to.have.property('userId');\r",
              "pm.expect(target).to.have.property('created');\r",
              "pm.expect(target).to.have.property('lastUpdated');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id).equal(1);\r",
              "    pm.expect(source.text).equal(target.text);\r",
              "    pm.expect(target.eventId).equal(2);\r",
              "    pm.expect(target.userId).equal(1);\r",
              "    pm.expect(target.created).to.not.be.null;\r",
              "    pm.expect(target.lastUpdated).to.not.be.null;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Added spam\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "1"
            },
            {
              "key": "commentId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Поиск администратором комментариев по тексту",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "var jsonData = pm.response.json();\r",
              "\r",
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
              "    pm.response.to.be.ok;\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "})\r",
              "\r",
              "pm.test(\"Размер списка должен равняться 1\", function() {\r",
              "    pm.expect(jsonData.length, 'Размер списка должен равняться 1').to.eql(1);\r",
              "})\r",
              "\r",
              "pm.test(\"Тест поля 'id' comment[0]\", function () {\r",
              "    pm.expect(jsonData[0]).to.have.property('id');\r",
              "    pm.expect(jsonData[0].id, 'Поле \"id\" должно равняться: 1').to.eql(1);\r",
              "});\r",
              "pm.test(\"Тест поля 'text' comment[0]\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0]).to.have.property('text');\r",
              "    pm.expect(jsonData[0].text, 'Поле \"text\" должно равняться: Added spam').to.eql('Added spam');\r",
              "});\r",
              "pm.test(\"Тест поля 'eventId' comment[0]\", function () {\r",
              "    pm.expect(jsonData[0]).to.have.property('eventId');\r",
              "    pm.expect(jsonData[0].eventId, 'Поле \"eventId\" должно равняться: 2').to.eql(2);\r",
              "});\r",
              "pm.test(\"Тест поля 'userId' comment[0]\", function () {\r",
              "    pm.expect(jsonData[0]).to.have.property('userId');\r",
              "    pm.expect(jsonData[0].userId, 'Поле \"userId\" должно равняться: 1').to.eql(1);\r",
              "});\r",
              "pm.test(\"Тест поля 'created' comment[0]\", function () {\r",
              "    pm.expect(jsonData[0]).to.have.property('created');\r",
              "    pm.expect(jsonData[0].created, 'Поле \"created\" не должно быть null').to.not.be.null;\r",
              "});\r",
              "pm.test(\"Тест поля 'lastUpdated' comment[0]\", function () {\r",
              "    pm.expect(jsonData[0]).to.have.property('lastUpdated');\r",
              "    pm.expect(jsonData[0].lastUpdated, 'Поле \"lastUpdated\" должно быть null').to.not.be.null;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/admin/comments?text=spam",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments"
          ],
          "query": [
            {
              "key": "text",
              "value": "spam"
            },
            {
              "key": "users",
              "value": "",
              "disabled": true
            },
            {
              "key": "events",
              "value": "",
              "disabled": true
            },
            {
              "key": "rangeStart",
              "value": "",
              "disabled": true
            },
            {
              "key": "rangeEnd",
              "value": "",
              "disabled": true
            },
            {
              "key": "sort",
              "value": "",
              "disabled": true
            },
            {
              "key": "from",
              "value": "",
              "disabled": true
            },
            {
              "key": "size",
              "value": "",
              "disabled": true
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Обновление комментария администратором",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.be.ok;   \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Комментарий должен содержать поля: id, created, text, authorId\", function () {\r",
              "pm.expect(target).to.have.property('id');\r",
              "pm.expect(target).to.have.property('text');\r",
              "pm.expect(target).to.have.property('eventId');\r",
              "pm.expect(target).to.have.property('userId');\r",
              "pm.expect(target).to.have.property('created');\r",
              "pm.expect(target).to.have.property('lastUpdated');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id).equal(1);\r",
              "    pm.expect(source.text).equal(target.text);\r",
              "    pm.expect(target.eventId).equal(2);\r",
              "    pm.expect(target.userId).equal(1);\r",
              "    pm.expect(target.created).to.not.be.null;\r",
              "    pm.expect(target.lastUpdated).to.not.be.null;\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Clean spam\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/comments/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "commentId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Удаление комментария автором",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
              "    pm.response.to.have.status(204);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "1"
            },
            {
              "key": "commentId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление комментария, который потом удалит администратор",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);   \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Comment for delete)\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/comments?eventId=2",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments"
          ],
          "query": [
            {
              "key": "eventId",
              "value": "2"
            }
          ],
          "variable": [
            {
              "key": "userId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Удаление комментария администратором",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
              "    pm.response.to.have.status(204);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments/:commentId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "commentId",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": " http://localhost:8080"
    },
    {
      "key": "Event ID",
      "value": "{(eid)}"
    },
    {
      "key": "eid",
      "value": "eid"
    },
    {
      "key": "uid",
      "value": "uid"
    }
  ]
}