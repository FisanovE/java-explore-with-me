DROP TABLE IF EXISTS categories, users, events, requests, compilations, compilations_events CASCADE;

CREATE TABLE IF NOT EXISTS categories (
id BIGINT GENERATED BY DEFAULT AS IDENTITY,
name VARCHAR(50) NOT NULL,
CONSTRAINT pk_categories PRIMARY KEY (id),
CONSTRAINT uq_categories_name UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS users (
id BIGINT GENERATED BY DEFAULT AS IDENTITY,
name VARCHAR(255) NOT NULL,
email VARCHAR(512) NOT NULL,
CONSTRAINT pk_users PRIMARY KEY (id),
CONSTRAINT UQ_USER_EMAIL UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS events (
id BIGINT GENERATED BY DEFAULT AS IDENTITY,
annotation VARCHAR(2000),
confirmed_request INT,
created_on TIMESTAMP WITHOUT TIME ZONE,
description VARCHAR(7000),
event_date TIMESTAMP WITHOUT TIME ZONE,
lat FLOAT,
lon FLOAT,
paid BOOLEAN,
participant_limit INT,
published_on TIMESTAMP WITHOUT TIME ZONE,
request_moderation BOOLEAN,
state VARCHAR(20),
title VARCHAR(120),
views INT,
category_id BIGINT,
initiator_id BIGINT,
CONSTRAINT pk_events PRIMARY KEY (id),
CONSTRAINT fk_category FOREIGN KEY (category_id) REFERENCES categories(id) ON UPDATE CASCADE,
CONSTRAINT fk_initiator FOREIGN KEY (initiator_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS requests (
id BIGINT GENERATED BY DEFAULT AS IDENTITY,
created TIMESTAMP WITHOUT TIME ZONE,
event_id BIGINT NOT NULL,
requester_id BIGINT NOT NULL,
status VARCHAR(20) NOT NULL,
CONSTRAINT pk_event PRIMARY KEY (id),
CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(id) ON UPDATE CASCADE,
CONSTRAINT fk_requester FOREIGN KEY (requester_id) REFERENCES users(id) ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS compilations (
id BIGINT GENERATED BY DEFAULT AS IDENTITY,
pinned Boolean NOT NULL,
title VARCHAR(120) NOT NULL,
event_id BIGINT,
CONSTRAINT pk_compilations PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS compilations_events (
compilations_id BIGINT NOT NULL,
events_id BIGINT NOT NULL,
CONSTRAINT pk_compilations_events PRIMARY KEY (compilations_id, events_id),
CONSTRAINT fk_compilations FOREIGN KEY (compilations_id) REFERENCES compilations (id) ON DELETE CASCADE,
CONSTRAINT fk_events FOREIGN KEY (events_id) REFERENCES events (id) ON DELETE CASCADE
);
